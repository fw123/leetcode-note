You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


My solution1:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode p = l1, q = l2 ,cur = head;
        int x=0,y=0,sum=0,carry = 0;
        while (p!=null || q!=null){
            x = (p!=null) ? p.val : 0;
            y = (q!=null) ? q.val : 0;
            sum = x+y+carry;
            carry = sum/10;
            cur.next = new ListNode(sum%10);
            cur = cur.next;
            if(p!=null)p = p.next;
            if(q!=null)q = q.next;
        }if(carry>0){
            cur.next = new ListNode(carry);
        }
        return head.next;
    }
}
我用的又是最无脑的解法，因为不了解ListNode，只能根据他给的提示中的结构使用，只击败的百分之2的人我也是服气的
